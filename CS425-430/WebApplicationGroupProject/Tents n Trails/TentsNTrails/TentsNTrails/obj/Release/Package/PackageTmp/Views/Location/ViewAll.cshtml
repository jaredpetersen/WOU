@model TentsNTrails.Models.LocationViewModel
@using TentsNTrails.Models
@using PagedList.Mvc

<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />


<!-- Google Maps Scripting -->
<script src="http://maps.googleapis.com/maps/api/js"></script>
<script>
    // Initialize the Map details.
    function initialize() {

        // center of map
        var mapCenter = new google.maps.LatLng(@ViewBag.centerLatitude, @ViewBag.centerLongitude);

        // initialize map properties
        var mapProp = {
            center: mapCenter,
            zoom: 4,
            mapTypeId: google.maps.MapTypeId.ROADMAP // types include ROADMAP, SATELLITE, HYBRID, and TERRAIN
        };

        // get the map
        var map = new google.maps.Map(document.getElementById("googleMap"), mapProp);
        // add a markers to the map
        @foreach (var item in Model.Locations) 
        {
            @:console.log("latitude:" + @item.Latitude + " longitude: " +  @item.Longitude);
            @:var marker = new google.maps.Marker({position: new google.maps.LatLng(@item.Latitude, @item.Longitude), map: map});
            @:var infowindow = new google.maps.InfoWindow({content: 'Loading...'});
            @:marker.html='<div><img id="location-image-preview" src="@Url.Content(item.PreviewImageURL)" title="Preview Image" alt="Image of @item.Label" style="width: 100px; height: auto; margin:0 auto;" /><br /><div class="label" text-align="center">@Html.ActionLink(item.Label, "Details", new { id = item.LocationID })</div></div>';
            @:google.maps.event.addListener(marker, 'click', function() {infowindow.setContent(this.html); infowindow.open(map,this);});
        }
    }

    // display the map
    google.maps.event.addDomListener(window, 'load', initialize);
</script>

@{
    ViewBag.Title = "Locations";
}

<!--RECREATIONS-FILTER-->
<h2>@ViewBag.Title</h2>
<div class="dropdown">
    <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-expanded="true">
        Filter by Recreation Type
        <span class="caret"></span>
    </button>
    <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1">
        <li>@Html.ActionLink("All", "Index", "Location", null, new { role = "menuItem", tabindex = "-1" })</li>
        @foreach (var item in Model.Recreations)
        {
            <li>@Html.ActionLink(item.Label, "Index", "Location", new { recreationID = item.RecreationID }, new { role = "menuItem", tabindex = "-1" })</li>
        }
    </ul>
</div>

<!-- MAP -->
<div class="row" style="padding-top:15px;">
    <div class="col-xs-12">
        <div id="googleMap" style="width:100%;height:300px;"></div>
        <p></p>
    </div>
</div>

<!--ADD-->
<p>
    @Html.ActionLink("Add New", "Create")
</p>

<!-- SEARCH -->
@using (Html.BeginForm())
{
    <div class="input-group">
        <span class="input-group-btn">
            <button class="btn btn-default" id="btn" type="submit">
                <span class="glyphicon glyphicon-search" aria-hidden="true"></span>
            </button>
        </span>
        <input type="text" class="form-control" name="searchString" placeholder="Search by Name or State (i.e. 'OR')">
    </div>
}

<!-- LOCATIONS -->
<h2>All Locations</h2>
<hr />
@{
    int padding = 7;
    int count = Model.Locations.Count();
    for (int i = 0; i < count; i += 2)
    {
        <div class="row" style="padding: 0px @(padding)px 0px @(padding)px">
            @for (int j = i; j < Math.Min(i + 2, count); j++)
            {
                Location item = Model.Locations[j];
                <div class="col-xs-12 col-md-6" style="padding: @(padding)px;">
                    <div id="review" style="min-height: 124px; min-width:370px">
                        @{ Html.RenderAction("Summary", "Location", new { id = item.LocationID }); }
                    </div>
                </div>
            }
        </div>
    }
}

@*
    <div class="row">
    @{
        int count, half, loop = 0;
        count = Model.Locations.Count();
        half = count / 2;
        for (int h = 0; h < 2; h++)
        {
            loop = half * (h + 1);
        <div class="col-md-6 col-xs-12">
            @for (int i = half * h; i < (loop > count ? count: loop) ; i++)
            {
                Location item = Model.Locations[i];
            <table class="reviews">
                <tr class="review-row">
                    <td>
                        <div id="review">
                            @{ Html.RenderAction("Summary", "Location", new { id = item.LocationID }); }
                        </div>
                    </td>
                    <td></td>
                </tr>
            </table>

            }
        </div>
        }
    }
    </div>
*@




<br />

<!--PAGING-->
Page @(Model.Locations.PageCount < Model.Locations.PageNumber ? 0 : Model.Locations.PageNumber) of @Model.Locations.PageCount
@Html.PagedListPager(Model.Locations, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))

@if (Request.IsAuthenticated && User.IsInRole("Admin"))
{
    @Html.ActionLink("Recreations", "Index", "Recreation")
}

