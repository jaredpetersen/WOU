@model TentsNTrails.Models.NotificationViewModel
@using TentsNTrails.Models
@{
    ViewBag.Size = 50;
}

@switch (Model.NotificationType)
{
    // *****************************************
    // FriendNotification
    // *****************************************
    case NotificationType.Friend:
        <a href="@Url.Action("ReadThenViewUserProfile", "Notification", new { id = Model.Notification.NotificationID })">
            @{ Html.RenderAction("UserThumbnail", "Profile", new { username = Model.PotentialFriend.UserName, size = ViewBag.Size }); }
        </a>

        <div style="padding-left: @(ViewBag.Size + 15)px;">
            @if (Model.Notification.Description.Equals(FriendNotification.REQUEST))
            {
                <span style="float:left">
                    @Html.Raw("You have a new ")
                    @Html.ActionLink("Connection Request", "ReadThenViewUserProfile", "Notification", new { id = Model.Notification.NotificationID }, null)
                    @Html.Raw(" from ")
                    @Model.PotentialFriend.UserName
                    &nbsp;&nbsp;
                </span>
                <span class="badge" style="float:right">@Html.Raw(Model.Notification.IsRead ? "" : "unread")</span>
                <br />
                @Html.Raw("on ")
                @Model.Notification.DateCreated
                @Html.Raw(".")
                
                using (Html.BeginForm("ReadThenViewConnectionRequests", "Notification", new { id = Model.Notification.NotificationID }))
                {
                    @Html.AntiForgeryToken();
                    <input class="btn @(Model.Notification.IsRead? "":"btn-primary")" type="submit" value="See All Requests" style="float:right" />
                }
                @Html.ActionLink("Delete", "Delete", new { id = Model.Notification.NotificationID })
                <br />
                <br />
               
            }
            else
            {
                <span style="float:left">
                    <a href="@Url.Action("ReadThenViewUserProfile", "Notification", new { id = Model.Notification.NotificationID })">@Model.PotentialFriend.UserName</a>
                    @Model.Notification.Description
                    &nbsp;&nbsp;
                </span>
                <span class="badge" style="float:right">@Html.Raw(Model.Notification.IsRead ? "" : "unread")</span>
                <br />
                @Html.Raw("on ")
                @Model.Notification.DateCreated
                @Html.Raw(".")
                <br />
                @Html.ActionLink("Delete", "Delete", new { id = Model.Notification.NotificationID })
            }
        </div>
        break;

    // *****************************************
    // Notification
    // *****************************************
    default:
        <div>
            <span style="float:left">
                @Html.ActionLink(Model.Notification.Description, "Read", "Notification", new { id = Model.Notification.NotificationID }, null)
                &nbsp;
            </span>
            <span class="badge" style="float:right">@Html.Raw(Model.Notification.IsRead ? "" : "unread")</span>
            <br />
            @Html.Raw("on ");
            @Model.Notification.DateCreated
            @Html.Raw(".")
            <br />
            @Html.ActionLink("Delete", "Delete", new { id = Model.Notification.NotificationID })
        </div>
        break;
}    