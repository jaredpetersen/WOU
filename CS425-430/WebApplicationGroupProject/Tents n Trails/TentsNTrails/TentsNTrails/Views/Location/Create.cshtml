@model TentsNTrails.Models.CreateLocationViewModel

<!-- Google Maps Scripting -->
<script src="http://maps.googleapis.com/maps/api/js"></script>
<script src="~/Scripts/location-create-google-map.js"></script>

@{
    ViewBag.Title = "Add a Location";
    string inputName = "SelectedFeatures";
    string formId = "createForm";
}

<h2>Add Location</h2>
<h4>Share a location with the community.</h4>

@Html.ValidationMessage("Overall", new { @class = "text-danger" })

<div class=" = row">
    <div class="col-sm-12 col-md-6"> 
    @using (Html.BeginForm("Create", "Location", FormMethod.Post, new { id = formId })) 
    {
        @Html.AntiForgeryToken()
    
        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <!-- NAME -->
            <div class="form-group">
                @Html.Label("Location Name", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Label, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Label, "", new { @class = "text-danger" })
                </div>
            </div>

            <p>
                <b>Select a location on the map to find it's coordinates:</b> Try to zoom in and be as accurate as possible 
                when selecting the location so that other users will be able to find this spot when they go. 
            </p>

            <!-- MAP -->
            <div>
                <div id="googleMap" style="width:100%;height:300px;"></div>
            </div>
            <br />

            <!-- LATITUDE -->
            <div class="form-group">
                @Html.LabelFor(model => model.Latitude, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
                </div>
            </div>

            <!-- LONGITUDE -->
            <div class="form-group">
                @Html.LabelFor(model => model.Longitude, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Longitude, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
                </div>
            </div>
            
            <!-- DESCRIPTION -->
            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", placeholder = "Include driving directions or any special facts, features, or history for this location." } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>
        

            <!-- DIFFICULTY -->
            <div class="form-group">
                @Html.LabelFor(model => model.Difficulty, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EnumDropDownListFor(model => model.Difficulty, htmlAttributes: new {@class = "form-control"})
                   @*@Html.EnumDropDownListFor(model => model.Difficulty, "Select a Difficulty...", htmlAttributes: new { id = "difficulty-select", @class = "form-control", onchange = "setSelectListTextColor('difficulty-select');" })
                    <script src="~/Scripts/set-select-list-text-color.js"></script>*@
                </div>
            </div>
  
            <!-- RECREATIONS -->
            <div id="review">
                <b>Recreation Type(s):</b>
                Choose all the activities that can be done at this location.
                @for (int i = 0; i < Model.RecOptions.Count; i++)
                {
                    @Html.HiddenFor(m => m.RecOptions[i].RecreationID)
                    @Html.HiddenFor(m => m.RecOptions[i].RecreationLabel)
                    <div class="form-group">
                        <div class="col-md-2 control-label" style="font-weight: bold">
                            @Html.DisplayFor(m => m.RecOptions[i].RecreationLabel, new { @class = "col-md-2 control-label" })
                        </div>
                        <div class="col-md-10">
                            @Html.CheckBoxFor(m => m.RecOptions[i].IsChecked, new { @class = "form-control" })
                        </div>
                    </div>
                }
                @Html.ValidationMessage("Recreations", new { @class = "text-danger" })
            </div>

            <br />


                    <p>
                        <b>Enter any Natural Features for this Location.</b>
                        <i>(Mountains, Lakes, etc)</i> <br/>
                        This allows users to browse and search locations by the Natural Features it has.
                    </p>


            
            <!-- NATURAL FEATURES -->
            <div class="form-group">

                <!-- LABEL -->
                <label class="control-label col-md-2 tag-form-label">Natural Features</label>
                <div class="col-md-10">
                    <div id="@inputName-div" class="tag-form-div"></div>
                    <div class="dropdown btn-group">
                        <div class="input-group">
                            <div class="input-group-btn">

                                <!-- SEARCH -->
                                <input id="@inputName-input" class="form-control search-input" tabindex="1" data-toggle="dropdown" aria-expanded="true" type="text" placeholder="Search for a Natural Feature" autocomplete="off">

                                <!-- DROPDOWN LIST -->
                                <ul id="@inputName-list" class="dropdown-menu scrollable-menu" role="menu" aria-labelledby="search-input">
                                    <li role="presentation"><a role="menuitem" tabindex="-1" href="">Add new</a></li>
                                    @foreach (var featureName in Model.AllNaturalFeatures)
                                    {
                                        <li role="presentation"><a role="menuitem" tabindex="-1" href="">@featureName</a></li>
                                    }
                                </ul>

                                <!-- DROPDOWN-BUTTON -->
                                <button id="@inputName-dropdown-button" class="btn btn-default dropdown-button" type="button" data-toggle="dropdown" aria-expanded="true" title="dropdown">
                                    <span class="glyphicon glyphicon-triangle-bottom"></span>
                                </button>

                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- BUTTONS -->
            <br />
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">

                    <!-- CREATE -->
                    <input type="submit" value="Create" class="btn btn-default" />

                    <!-- CANCEL -->
                    <button class="btn btn-default" type="button" onclick="location.href='@Url.Action("Index", "Location")'">Cancel</button>

                </div>
            </div>
        </div>
    }
    </div>
</div>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/hidden-list-search.js"></script>
<script src="~/Scripts/hidden-form-controls.js"></script>

<script>
    var formId = '@formId';
    var tagName = '@inputName';
    var tagClass = 'tag tag-natural-feature';

    var hiddenListSearch = new HiddenListSearch();
    var hiddenFormControls = new HiddenFormControls();

    // load the tags from matching url values.
    //hiddenFormControls.addUrlParametersHiddenInputAndTag(formId, tagName, tagClass);

    // custom onClickFunction for hiddenListSearch
    var addTag = function (inputValue) {
        hiddenFormControls.addTagParseCommasForceUnique(formId, tagName, inputValue, tagClass);
    };

    // register the search input listeners.
    hiddenListSearch.registerInputListenersFor(tagName, addTag);

    //	set a custom show elment condition (require that tag does not already exist)
    hiddenListSearch.setShowElementCondition(function (input) {
        return !hiddenFormControls.tagWithValueExists(input, tagName);
    });


    // add the tags associated with the viewModel.
    @foreach (var feature in Model.SelectedFeatures)
	{
	    @:hiddenFormControls.addHiddenInputAndTag(formId, tagName, '@feature', tagClass);
        	}
    hiddenListSearch.initializeSearchResults(tagName);
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
